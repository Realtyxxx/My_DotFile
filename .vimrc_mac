" vundle
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

colorscheme molokai
set nu
set showcmd
set laststatus=1
set magic
set cursorline
if $TERM !="linux"
   set mouse=a
endif
set go=
set showmatch
set matchtime=1
set nobackup
set ruler
set autoindent
set confirm
" realtyxxx add
set hls is

set tabstop=2
set shiftwidth=2
set smarttab
set nocompatible
set expandtab
set backspace=indent,eol,start

set wildmenu
set fo=cqrt
set laststatus=2
set textwidth=120
set colorcolumn=+1
set ww=<,>,h,l
set noeb visualbell
let mapleader = "\<space>"

filetype on
filetype plugin on
filetype indent on
syntax on
syntax enable

" encoding
set fencs=utf-8,usc-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8

"-------------------------theme----------------------
"yowish
"colorscheme yowish

"let g:yowish.colors = {
            "\	'background'       : ['#2f343f', 'none'],
            "\	'backgroundDark'   : ['#191d27', '16'],
            "\	'backgroundLight'  : ['#464b5b', '59'],
            "\	'blue'             : ['#5295e2', '68'],
            "\	'comment'          : ['#5b6176', '242'],
            "\	'lightBlue'        : ['#e39f52', '179'],
            "\	'lightYellow'      : ['#80aee3', '110'],
            "\	'yellow'           : ['#5295e2', '68'],
            "\ }

"Molokai
colorscheme molokai
set t_Co=256
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0


"base16-theme
"let base16colorspace=256
"colorscheme base16-oceanicnext

" Oceanic
"let g:material_style='oceanic'
"set background=dark
"colorscheme vim-material
"let g:airline_theme='material'
"-------------------------theme----------------------

" some map
map <F5> :call CR()<CR>
func! CR()
    exec "w"
    exec "!g++ -std=c++17 % -o %<.out"
    exec "! ./%<.out"
endfunc

map <F10> :call RG()<CR>
func! RG()
    exec "w"
    exec "!g++ -std=c++17 % -g -o %<.out"
    exec "! ./%<.out"
endfunc

"map <F9> :call ClangFormat()<CR>
"func! ClangFormat()
"    exec "w"
"    exec "!clang-format  -i  % "
"endfunc

map <f2> :call SetTitle()<CR>
func SetTitle()
let l = 0
let l = l + 1 | call setline(l,'/*')
let l = l + 1 | call setline(l,' @File name   : '.expand("%"))
let l = l + 1 | call setline(l,' @Author      : Realtyxxx')
let l = l + 1 | call setline(l,' @Created Time: '.strftime("%c"))
let l = l + 1 | call setline(l,' @TODO        :')
let l = l + 1 | call setline(l,'*/')
let l = l + 1 | call setline(l,'')
"let l = l + 1 | call setline(l,'#include <cstdio>')
"let l = l + 1 | call setline(l,'#include <cstring>')
"let l = l + 1 | call setline(l,'#include <cstdlib>')
"let l = l + 1 | call setline(l,'#include <iostream>')
"let l = l + 1 | call setline(l,'#include <string>')
"let l = l + 1 | call setline(l,'#include <algorithm>')
"let l = l + 1 | call setline(l,'#include <vector>')
"let l = l + 1 | call setline(l,'#include <queue>')
"let l = l + 1 | call setline(l,'#include <set>')
"let l = l + 1 | call setline(l,'#include <map>')
"let l = l + 1 | call setline(l,'')
"let l = l + 1 | call setline(l,'using namespace std;')
"let l = l + 1 | call setline(l,'')
endfunc

"map <F3> :call SetTitle2()<CR>
"func SetTitle2()
"let l = 0
"let l = l + 1 | call setline(l,'/******************************')
"let l = l + 1 | call setline(l,' *File name: '.expand("%"))
"let l = l + 1 | call setline(l,' *Author: Realtyxxx')
"let l = l + 1 | call setline(l,' *Created Time: '.strftime("%c"))
"let l = l + 1 | call setline(l,' *TODO:')
"let l = l + 1 | call setline(l,'******************************/')
"let l = l + 1 | call setline(l,'')
"let l = l + 1 | call setline(l,'#include <bits/stdc++.h>')
"let l = l + 1 | call setline(l,'using namespace std;')
"let l = l + 1 | call setline(l,'')
"endfunc

nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
noremap <leader>w :w<CR>
noremap <leader>q :q!<CR>
inoremap jj <esc>
inoremap <Ctrl>w db

noremap <leader>b :ls<CR>
noremap <leader>n :bn<CR>
noremap <leader>p :bp<CR>
noremap <leader>d :bd<CR>:bp<CR>

" Nerd Tree
let NERDChristmasTree=0
let NERDTreeWinSize=40
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
let NERDTreeShowBookmarks=1
let NERDTreeWinPos="left"
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
nmap ff :NERDTreeToggle<CR>

" Tagbar
let g:tagbar_width=50
let g:Tlist_Ctags_Cmd='/usr/local/Cellar/ctags/5.8_2/bin/ctags'
let g:tagbar_ctags_bin = 'ctags'                       "tagbar以来ctags插件
let g:tagbar_left = 0                                          "让tagbar在页面左侧显示，默认右边
let g:tagbar_width = 30                                     "设置tagbar的宽度为30列，默认40
let g:tagbar_autofocus = 1                                "这是tagbar一打开，光标即在tagbar页面内，默认在vim打开的文件内
let g:tagbar_sort = 0                                         "设置标签不排序，默认排序
nmap <F7> :TagbarToggle<CR>

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
let g:ycm_server_python_interpreter='/usr/local/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
let g:ycm_confirm_extra_conf=0  " 打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_key_invoke_completion = '<C-a>' " ctrl + a 触发补全，防止与其他插件冲突

nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F4> :YcmDiags<CR>


"Plugin 'Chiel92/vim-autoformat'
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
noremap <F9> :Autoformat<CR>
let g:autoformat_verbosemode=1


"Plugin 'preservim/nerdcommenter'
"map <C-m> <leader>cc
"map <A-m> <leader>cu
"unmap <CR>
map cc <leader>c<space>
"切换所选行的注释状态。如果最上面的一行被注释，所有被选中的行都会被取消注释，反之亦然。
map cs <leader>cs
"用一个漂亮的块状格式的布局来注释所选的行。
map ca <leader>cA
"将注释定界符添加到行尾，并在它们之间进入插入模式。
" Add your own custom formats or override the defaults
"let g:NERDCustomDelimiters = { 'cpp': { 'left': '/*','right': '*/' } }


"vim-cpp-enhanced-highlight
"Plugin 'octol/vim-cpp-enhanced-highlight'
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1


"clipboard
"set clipboard=unnamed
vmap <C-c> "+Y
nmap <C-v> "+p



"vim-airline
set laststatus=2  "永远显示状态栏
let g:airline_powerline_fonts = 1  " 支持 powerline 字体
let g:airline#extensions#tabline#enabled = 1 " 显示窗口tab和buffer
let g:airline_powerline_fonts = 1
let g:airline_theme = 'simple'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'


"buffer
nmap <leader>bd :bd<CR>
